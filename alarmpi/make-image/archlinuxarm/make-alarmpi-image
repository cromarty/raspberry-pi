#!/bin/bash
#
# make-alarmpi-image
#
# Copyright 2018, Mike Ray, <mike.ray@btinternet.com>
#
# This is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3, or (at your option) any later
# version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this package; see the file COPYING.  If not, write to the Free
# Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
#--code--

export TEXTDOMAIN=rpi-image-tool
export TEXTDOMAINDIR=/usr/local/share/locale

. gettext.sh

. rpi-image-tool.lib


usage() {
	cat <<EOF


Usage: make-alarmpi-image [options]

Options:

    -6
    
        Create an armv6 image.
	
    -7
    
        Create an armv7 image
	
    -8
    
        Create an aarch64 image
	
    -C <workdir>

        Clean-up. Give the same <workdir> given in the run to create
        the image.

    -H <host name>

        Hostname to be written to image if different from default alarmpi.
	
    -c <integer>

        Block count. Number of blocks to write to new (initially
	    empty) image.

    -H

        Show this usage message and exit.
	
    -d

        Dry-run. Just show all the settings and exit without creating an image.
	
    -e

        Copy expand script to new image.
	
    -f

        Copy fstab to new image.

    -i <image name>

        Name of image to be created if desired to be different from default.
	
    -s <integer>

        Split count. Number of blocks in first (vfat) partition.
	
    -w <work dir>

        The working directory where file-systems will be mounted.
	
    -z <block size>

        Block size supplied to 'dd' to make empty image file. Valid
        values are '1M' or '1MB'.

This script must be run as root, even to get the help message.

For more detailed information about the options, see 'rpi-image-tool'
help.

EOF

}

(( EUID == 0 )) || { echo "Script must be run as root" ; exit 1 ; }

cleanup=0
expandscripts=0
fstab=0
dryrun=0

# These can all be overridden by environment variables of the same name,
# or by switches, see further down
#
# Note, because this script needs to be run as root, use the -E switch
# with sudo to preserve your environment
: ${WORKDIR:=.}
: ${HOSTNAME_:=alarmpi}
: ${BLOCKCOUNT:=1998}
: ${BLOCKSIZE:=1M}
: ${SPLIT:=96}

while getopts ':678CH:defoc:hi:s:w:z:' flag ; do
	case $flag in
	h)
		usage
		exit 0
	;;
	C)
		cleanup=1
	;;
	H)
		HOSTNAME_="${OPTARG}"
	;;
	d)
		dryrun=1
	;;
	e)
		expandscripts=1
	;;
	f)
		fstab=1
	;;
	6)
		ARMV=armv6
	;;
	7)
		ARMV=armv7
	;;
		8)
		ARMV=armv8
	;;
	c)
		BLOCKCOUNT="${OPTARG}"
		validate_blockcount ${BLOCKCOUNT}
	;;
	s)
		SPLIT="${OPTARG}"
		validate_split ${SPLIT}
	;;
	w)
		WORKDIR="${OPTARG}"
	;;
	z)
		BLOCKSIZE="${OPTARG}"
		validate_blocksize ${BLOCKSIZE}
	;;
	i)
		IMAGENAME="${OPTARG}"
	;;
	(?)
echo ${flag}
		echo $(gettext "Invalid option") >&2
		echo >&2
		usage
		exit 1
	;;
	:)
		echo $(eval_gettext "Option - \$OPTARG requires an argument.") >&2
		echo >&2
		usage
		exit 1
	;;
	esac
done

case ${ARMV} in
	armv6|armv7|armv8)
		echo "Creating an ${ARMV} image file"
		WORKDIR="${WORKDIR}.${ARMV}"
	;;
	*)
		usage
		exit 1
	;;
esac


# Image file name set here can be overridden either by an environment
# variable of the same name or in switches, see above
: ${IMAGENAME:=ArchLinuxARM-$(date +%F | sed 's:-::g').${ARMV}.img}


echo "Image file name will be ${IMAGENAME}"
echo "Working directory will be ${WORKDIR}"
echo "Block count will be ${BLOCKCOUNT}"
echo "Block size will be ${BLOCKSIZE}"
echo "Split will be ${SPLIT}"
echo "Hostname will be ${HOSTNAME_}"

if (( dryrun )) ; then
	echo "Dry run, stopping."
	exit 0
fi

# mount points of file-systems created in the .img file
# sub-directories of working dir will be created with these names
BOOTMP="${WORKDIR}/boot"
ROOTMP="${WORKDIR}/root"

set -e

rpi-image-tool -N "${IMAGENAME}" -c "${BLOCKCOUNT}" \
	-z "${BLOCKSIZE}" -s "${SPLIT}" -w "${WORKDIR}"


echo 'Downloading the latest Arch...'
case ${ARMV} in
	armv6)
		wget -q http://archlinuxarm.org/os/ArchLinuxARM-rpi-latest.tar.gz -O "${WORKDIR}/arch-latest-${ARMV}.tar.gz" 
	;;
	armv7)
		wget -q http://archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz -O "${WORKDIR}/arch-latest-${ARMV}.tar.gz"
	;;
	armv8)
		wget -q http://archlinuxarm.org/os/ArchLinuxARM-rpi-3-latest.tar.gz -O "${WORKDIR}/arch-latest-${ARMV}.tar.gz"
	;;
		*)
		echo 'Incorrect value for ARMV'
		exit 1
esac

echo 'Extracting the filesystems...'
bsdtar -zxvf "${WORKDIR}/arch-latest-${ARMV}.tar.gz" -C "${ROOTMP}"

# move the boot stuff into the boot partition
echo 'Move the boot files into the boot partition...'
mv ${ROOTMP}/boot/* ${BOOTMP}

# write the chosen hostname into /etc/hostname
echo 'Writing the host name...'
echo "${HOSTNAME_}" > "${ROOTMP}/etc/hostname"

# install scripts
for SCRIPT in files/root/*.sh
do
	echo "Install ${SCRIPT}..."
	install -m0755 -t ${ROOTMP}/root ${SCRIPT} 
done

# install the message of the day file if it exists
if test -f files/etc/motd ; then
	echo "Installing motd file..."
	install -m0644 -t ${ROOTMP}/etc files/etc/motd
fi

echo "Installing cmdline.txt..."
install -T files/boot/cmdline.txt ${BOOTMP}/cmdline.txt
echo "Installing config.txt..."
install -T files/boot/config.txt ${BOOTMP}/config.txt

if (( fstab )) ; then
	echo "Installing fstab..."
	install -T files/etc/fstab  ${ROOTMP}/etc/fstab
fi

if (( expandscripts )) ; then
	echo "Installing expand script..."
	install -d ${ROOTMP}/usr/lib/raspi-config
	install -m0755 -t ${ROOTMP}/usr/lib/raspi-config files/usr/lib/raspi-config/init_resize.sh
	install -m0755 -t ${ROOTMP}/usr/lib/raspi-config files/usr/lib/raspi-config/dev_variables.sh
	echo "Calling rpi-image-tool to edit PARTUID entrie in cmdline.txt..."
	rpi-image-tool -I ${WORKDIR}
	echo "Calling rpi-image-tool to edit PARTUID entries in /etc/fstab..."
	rpi-image-tool -F ${WORKDIR}
fi


sync

if (( cleanup )) ; then
	rpi-image-tool -C "${WORKDIR}"
	rm -rf "${WORKDIR}"
fi


exit 0

